import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Abdulazeez Alazzawi
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title = "";
        int titleIndex = getChildElement(channel, "title");
        if (titleIndex != -1 && channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        } else {
            title = "Empty Title";
        }

        String description = "";
        int descriptionIndex = getChildElement(channel, "description");
        if (descriptionIndex != -1
                && channel.child(descriptionIndex).numberOfChildren() > 0) {
            description = channel.child(descriptionIndex).child(0).label();
        } else {
            description = "No description";
        }

        channel.tag

        String link = "";
        int linkIndex = getChildElement(channel, "link");
        if (linkIndex != -1 && channel.child(linkIndex).numberOfChildren() > 0) {
            link = channel.child(linkIndex).child(0).label();
        }

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=\"" + link + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;
        int i = 0;
        while (index == -1 && i < xml.numberOfChildren()) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                index = i;
            }
            i++;
        }

        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int dateIndex = getChildElement(item, "pubDate");
        String date = "";
        if (dateIndex != -1 && item.child(dateIndex).numberOfChildren() > 0) {
            date = item.child(dateIndex).child(0).label();
        } else {
            date = "No date available";
        }

        int sourceIndex = getChildElement(item, "source");
        String source = "";
        String sourceUrl = "";
        if (sourceIndex != -1) {
            if (item.child(sourceIndex).numberOfChildren() > 0) {
                source = item.child(sourceIndex).child(0).label();
            }
            sourceUrl = item.child(sourceIndex).attributeValue("url");
        } else {
            source = "No source available";
        }

        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        String title = "";
        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            title = item.child(titleIndex).child(0).label();
        } else if (descriptionIndex != -1
                && item.child(descriptionIndex).numberOfChildren() > 0) {
            title = item.child(descriptionIndex).child(0).label();
        } else {
            title = "No title available";
        }

        int linkIndex = getChildElement(item, "link");
        String link = "";
        if (linkIndex != -1 && item.child(linkIndex).numberOfChildren() > 0) {
            link = item.child(linkIndex).child(0).label();
        }

        out.println("<tr>");
        out.println("<td>" + date + "</td>");
        if (!sourceUrl.isEmpty()) {
            out.println("<td><a href=\"" + sourceUrl + "\">" + source + "</a></td>");
        } else {
            out.println("<td>" + source + "</td>");
        }
        if (!link.isEmpty()) {
            out.println("<td><a href=\"" + link + "\">" + title + "</a></td>");
        } else {
            out.println("<td>" + title + "</td>");
        }
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        SimpleWriter htmlFile = new SimpleWriter1L(file);
        XMLTree rss = new XMLTree1(url);

        if (rss.isTag() && rss.label().equals("rss") && rss.hasAttribute("version")
                && rss.attributeValue("version").equals("2.0")) {
            XMLTree channel = rss.child(0);

            outputHeader(channel, htmlFile);

            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), htmlFile);
                }
            }

            outputFooter(htmlFile);

            out.println("HTML file generated successfully: " + file);
        } else {
            out.println("Error: The provided URL does not contain a valid RSS 2.0 feed: "
                    + url);
        }

        htmlFile.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL of an XML file containing RSS 2.0 feed information: ");
        String xmlUrl = in.nextLine();

        out.print("Enter the name of the output index HTML file: ");
        String indexFileName = in.nextLine();

        XMLTree inputXML = new XMLTree1(xmlUrl);

        SimpleWriter indexFile = new SimpleWriter1L(indexFileName);

        String indexTitle = inputXML.attributeValue("title");
        indexFile.println("<html><head><title>" + indexTitle + "</title></head><body>");
        indexFile.println("<h1>" + indexTitle + "</h1>");
        indexFile.println("<ul>");

        for (int i = 0; i < inputXML.numberOfChildren(); i++) {
            XMLTree feed = inputXML.child(i);
            String url = feed.attributeValue("url");
            String name = feed.attributeValue("name");
            String file = feed.attributeValue("file");

            indexFile.println("<li><a href=\"" + file + "\">" + name + "</a></li>");

            processFeed(url, file, out);
        }

        indexFile.println("</ul></body></html>");
        indexFile.close();

        out.println("Processing complete. Index file generated: " + indexFileName);

        in.close();
        out.close();
    }
}
